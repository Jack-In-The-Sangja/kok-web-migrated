/* tslint:disable */
/* eslint-disable */
/**
 * 체험콕 서비스
 * 체험단 모집 및 관리 서비스 API
 *
 * The version of the OpenAPI document: v1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { UserDTO } from './UserDTO';
import {
    UserDTOFromJSON,
    UserDTOFromJSONTyped,
    UserDTOToJSON,
} from './UserDTO';

/**
 * 응답 데이터
 * @export
 * @interface LoginDataDTO
 */
export interface LoginDataDTO {
    /**
     * 로그인 타입
     * @type {string}
     * @memberof LoginDataDTO
     */
    loginType?: LoginDataDTOLoginTypeEnum;
    /**
     * 액세스 토큰
     * @type {string}
     * @memberof LoginDataDTO
     */
    accessToken?: string;
    /**
     * 리프레시 토큰
     * @type {string}
     * @memberof LoginDataDTO
     */
    refreshToken?: string;
    /**
     * 
     * @type {UserDTO}
     * @memberof LoginDataDTO
     */
    user?: UserDTO;
}

/**
* @export
* @enum {string}
*/
export enum LoginDataDTOLoginTypeEnum {
    Login = 'login',
    Registration = 'registration'
}


/**
 * Check if a given object implements the LoginDataDTO interface.
 */
export function instanceOfLoginDataDTO(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function LoginDataDTOFromJSON(json: any): LoginDataDTO {
    return LoginDataDTOFromJSONTyped(json, false);
}

export function LoginDataDTOFromJSONTyped(json: any, ignoreDiscriminator: boolean): LoginDataDTO {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'loginType': !exists(json, 'loginType') ? undefined : json['loginType'],
        'accessToken': !exists(json, 'accessToken') ? undefined : json['accessToken'],
        'refreshToken': !exists(json, 'refreshToken') ? undefined : json['refreshToken'],
        'user': !exists(json, 'user') ? undefined : UserDTOFromJSON(json['user']),
    };
}

export function LoginDataDTOToJSON(value?: LoginDataDTO | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'loginType': value.loginType,
        'accessToken': value.accessToken,
        'refreshToken': value.refreshToken,
        'user': UserDTOToJSON(value.user),
    };
}

