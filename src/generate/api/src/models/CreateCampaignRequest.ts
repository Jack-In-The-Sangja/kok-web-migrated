/* tslint:disable */
/* eslint-disable */
/**
 * 체험콕 서비스
 * 체험단 모집 및 관리 서비스 API
 *
 * The version of the OpenAPI document: v1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { CategoryInfo } from './CategoryInfo';
import {
    CategoryInfoFromJSON,
    CategoryInfoFromJSONTyped,
    CategoryInfoToJSON,
} from './CategoryInfo';
import type { CompanyInfo } from './CompanyInfo';
import {
    CompanyInfoFromJSON,
    CompanyInfoFromJSONTyped,
    CompanyInfoToJSON,
} from './CompanyInfo';
import type { VisitLocationRequest } from './VisitLocationRequest';
import {
    VisitLocationRequestFromJSON,
    VisitLocationRequestFromJSONTyped,
    VisitLocationRequestToJSON,
} from './VisitLocationRequest';

/**
 * 캠페인 등록 요청
 * @export
 * @interface CreateCampaignRequest
 */
export interface CreateCampaignRequest {
    /**
     * 캠페인 썸네일 이미지 URL - 캠페인 목록에서 표시될 대표 이미지
     * @type {string}
     * @memberof CreateCampaignRequest
     */
    thumbnailUrl?: string;
    /**
     * 캠페인 진행 플랫폼 - 인플루언서가 리뷰를 게시할 SNS 플랫폼
     * @type {string}
     * @memberof CreateCampaignRequest
     */
    campaignType: CreateCampaignRequestCampaignTypeEnum;
    /**
     * 캠페인 제목 - 인플루언서들에게 노출될 캠페인 이름
     * @type {string}
     * @memberof CreateCampaignRequest
     */
    title: string;
    /**
     * 제공 제품/서비스 간략 정보 - 캠페인에서 제공하는 혜택을 간단히 요약 (10~20글자 권장)
     * @type {string}
     * @memberof CreateCampaignRequest
     */
    productShortInfo: string;
    /**
     * 최대 신청 가능 인원 수 - 이 캠페인에 신청할 수 있는 인플루언서의 최대 수
     * @type {number}
     * @memberof CreateCampaignRequest
     */
    maxApplicants: number;
    /**
     * 제공 제품/서비스 상세 정보 - 캠페인에서 제공하는 혜택과 체험 내용에 대한 자세한 설명
     * @type {string}
     * @memberof CreateCampaignRequest
     */
    productDetails: string;
    /**
     * 📅 모집 시작일 - 캠페인이 공개되어 인플루언서들이 신청을 시작할 수 있는 날짜
     * @type {Date}
     * @memberof CreateCampaignRequest
     */
    recruitmentStartDate: Date;
    /**
     * 📅 모집 종료일 - 캠페인 모집이 마감되는 날짜 (이후 신청 불가)
     * @type {Date}
     * @memberof CreateCampaignRequest
     */
    recruitmentEndDate: Date;
    /**
     * 📅 신청 마감일 - 인플루언서들이 캠페인에 신청할 수 있는 최종 날짜 (모집 시작일 이후여야 함)
     * @type {Date}
     * @memberof CreateCampaignRequest
     */
    applicationDeadlineDate: Date;
    /**
     * 📅 참여자 선정일 - 신청자 중에서 최종 참여자를 선정하여 발표하는 날짜 (모집 종료일 이후여야 함)
     * @type {Date}
     * @memberof CreateCampaignRequest
     */
    selectionDate: Date;
    /**
     * 📅 리뷰 제출 마감일 - 선정된 인플루언서들이 체험 후 리뷰를 완료해야 하는 최종 날짜 (선정일 이후여야 함)
     * @type {Date}
     * @memberof CreateCampaignRequest
     */
    reviewDeadlineDate: Date;
    /**
     * 🎯 선정 기준 - 인플루언서 선정 시 고려할 기준 (팔로워 수, 전문성, 활동 이력 등)
     * @type {string}
     * @memberof CreateCampaignRequest
     */
    selectionCriteria?: string;
    /**
     * 📋 리뷰어 미션 가이드 - 선정된 인플루언서가 수행해야 할 구체적인 미션 내용 (마크다운 형식 지원)
     * @type {string}
     * @memberof CreateCampaignRequest
     */
    missionGuide?: string;
    /**
     * 🏷️ 미션 키워드 - 리뷰 콘텐츠에 반드시 포함되어야 하는 해시태그나 키워드 목록
     * @type {Array<string>}
     * @memberof CreateCampaignRequest
     */
    missionKeywords?: Array<string>;
    /**
     * 
     * @type {CategoryInfo}
     * @memberof CreateCampaignRequest
     */
    category: CategoryInfo;
    /**
     * 
     * @type {CompanyInfo}
     * @memberof CreateCampaignRequest
     */
    companyInfo?: CompanyInfo;
    /**
     * 📍 방문 위치 정보 - 방문형 캠페인의 경우 인플루언서가 방문해야 할 장소들의 상세 정보
     * @type {Array<VisitLocationRequest>}
     * @memberof CreateCampaignRequest
     */
    visitLocations?: Array<VisitLocationRequest>;
}

/**
* @export
* @enum {string}
*/
export enum CreateCampaignRequestCampaignTypeEnum {
     = '인스타그램',
    2 = '블로그',
    3 = '유튜브',
    4 = '틱톡'
}


/**
 * Check if a given object implements the CreateCampaignRequest interface.
 */
export function instanceOfCreateCampaignRequest(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "campaignType" in value;
    isInstance = isInstance && "title" in value;
    isInstance = isInstance && "productShortInfo" in value;
    isInstance = isInstance && "maxApplicants" in value;
    isInstance = isInstance && "productDetails" in value;
    isInstance = isInstance && "recruitmentStartDate" in value;
    isInstance = isInstance && "recruitmentEndDate" in value;
    isInstance = isInstance && "applicationDeadlineDate" in value;
    isInstance = isInstance && "selectionDate" in value;
    isInstance = isInstance && "reviewDeadlineDate" in value;
    isInstance = isInstance && "category" in value;

    return isInstance;
}

export function CreateCampaignRequestFromJSON(json: any): CreateCampaignRequest {
    return CreateCampaignRequestFromJSONTyped(json, false);
}

export function CreateCampaignRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): CreateCampaignRequest {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'thumbnailUrl': !exists(json, 'thumbnailUrl') ? undefined : json['thumbnailUrl'],
        'campaignType': json['campaignType'],
        'title': json['title'],
        'productShortInfo': json['productShortInfo'],
        'maxApplicants': json['maxApplicants'],
        'productDetails': json['productDetails'],
        'recruitmentStartDate': (new Date(json['recruitmentStartDate'])),
        'recruitmentEndDate': (new Date(json['recruitmentEndDate'])),
        'applicationDeadlineDate': (new Date(json['applicationDeadlineDate'])),
        'selectionDate': (new Date(json['selectionDate'])),
        'reviewDeadlineDate': (new Date(json['reviewDeadlineDate'])),
        'selectionCriteria': !exists(json, 'selectionCriteria') ? undefined : json['selectionCriteria'],
        'missionGuide': !exists(json, 'missionGuide') ? undefined : json['missionGuide'],
        'missionKeywords': !exists(json, 'missionKeywords') ? undefined : json['missionKeywords'],
        'category': CategoryInfoFromJSON(json['category']),
        'companyInfo': !exists(json, 'companyInfo') ? undefined : CompanyInfoFromJSON(json['companyInfo']),
        'visitLocations': !exists(json, 'visitLocations') ? undefined : ((json['visitLocations'] as Array<any>).map(VisitLocationRequestFromJSON)),
    };
}

export function CreateCampaignRequestToJSON(value?: CreateCampaignRequest | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'thumbnailUrl': value.thumbnailUrl,
        'campaignType': value.campaignType,
        'title': value.title,
        'productShortInfo': value.productShortInfo,
        'maxApplicants': value.maxApplicants,
        'productDetails': value.productDetails,
        'recruitmentStartDate': (value.recruitmentStartDate.toISOString().substring(0,10)),
        'recruitmentEndDate': (value.recruitmentEndDate.toISOString().substring(0,10)),
        'applicationDeadlineDate': (value.applicationDeadlineDate.toISOString().substring(0,10)),
        'selectionDate': (value.selectionDate.toISOString().substring(0,10)),
        'reviewDeadlineDate': (value.reviewDeadlineDate.toISOString().substring(0,10)),
        'selectionCriteria': value.selectionCriteria,
        'missionGuide': value.missionGuide,
        'missionKeywords': value.missionKeywords,
        'category': CategoryInfoToJSON(value.category),
        'companyInfo': CompanyInfoToJSON(value.companyInfo),
        'visitLocations': value.visitLocations === undefined ? undefined : ((value.visitLocations as Array<any>).map(VisitLocationRequestToJSON)),
    };
}

