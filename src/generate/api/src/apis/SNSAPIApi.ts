/* tslint:disable */
/* eslint-disable */
/**
 * 체험콕 서비스
 * 체험단 모집 및 관리 서비스 API
 *
 * The version of the OpenAPI document: v1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  BaseResponseError,
  BaseResponseSuccess,
  FollowerCountUpdateRequest,
  PlatformConnectRequest,
  Success,
} from '../models/index';
import {
    BaseResponseErrorFromJSON,
    BaseResponseErrorToJSON,
    BaseResponseSuccessFromJSON,
    BaseResponseSuccessToJSON,
    FollowerCountUpdateRequestFromJSON,
    FollowerCountUpdateRequestToJSON,
    PlatformConnectRequestFromJSON,
    PlatformConnectRequestToJSON,
    SuccessFromJSON,
    SuccessToJSON,
} from '../models/index';

export interface ConnectPlatformRequest {
    authorization: string;
    platformConnectRequest: PlatformConnectRequest;
}

export interface DisconnectAllPlatformsRequest {
    authorization: string;
}

export interface DisconnectPlatformRequest {
    authorization: string;
    platformId: number;
}

export interface GetUserPlatformsRequest {
    authorization: string;
}

export interface UpdateFollowerCountRequest {
    authorization: string;
    platformId: number;
    followerCountUpdateRequest: FollowerCountUpdateRequest;
}

/**
 * 
 */
export class SNSAPIApi extends runtime.BaseAPI {

    /**
     * 플랫폼 타입(BLOG, INSTAGRAM, YOUTUBE)과 URL을 입력받아 연동합니다. (팔로워 수는 자동으로 수집되지 않으며 수동 업데이트가 필요합니다.)
     * SNS 플랫폼 연동
     */
    async connectPlatformRaw(requestParameters: ConnectPlatformRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Success>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling connectPlatform.');
        }

        if (requestParameters.platformConnectRequest === null || requestParameters.platformConnectRequest === undefined) {
            throw new runtime.RequiredError('platformConnectRequest','Required parameter requestParameters.platformConnectRequest was null or undefined when calling connectPlatform.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['Authorization'] = String(requestParameters.authorization);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/platforms/connect`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PlatformConnectRequestToJSON(requestParameters.platformConnectRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SuccessFromJSON(jsonValue));
    }

    /**
     * 플랫폼 타입(BLOG, INSTAGRAM, YOUTUBE)과 URL을 입력받아 연동합니다. (팔로워 수는 자동으로 수집되지 않으며 수동 업데이트가 필요합니다.)
     * SNS 플랫폼 연동
     */
    async connectPlatform(requestParameters: ConnectPlatformRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Success> {
        const response = await this.connectPlatformRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 사용자의 모든 SNS 연동을 해제합니다.
     * 모든 SNS 플랫폼 연동 해제
     */
    async disconnectAllPlatformsRaw(requestParameters: DisconnectAllPlatformsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Success>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling disconnectAllPlatforms.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['Authorization'] = String(requestParameters.authorization);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/platforms/all`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SuccessFromJSON(jsonValue));
    }

    /**
     * 사용자의 모든 SNS 연동을 해제합니다.
     * 모든 SNS 플랫폼 연동 해제
     */
    async disconnectAllPlatforms(requestParameters: DisconnectAllPlatformsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Success> {
        const response = await this.disconnectAllPlatformsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 연동된 SNS 플랫폼을 해제합니다.
     * SNS 플랫폼 연동 해제
     */
    async disconnectPlatformRaw(requestParameters: DisconnectPlatformRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Success>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling disconnectPlatform.');
        }

        if (requestParameters.platformId === null || requestParameters.platformId === undefined) {
            throw new runtime.RequiredError('platformId','Required parameter requestParameters.platformId was null or undefined when calling disconnectPlatform.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['Authorization'] = String(requestParameters.authorization);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/platforms/{platformId}`.replace(`{${"platformId"}}`, encodeURIComponent(String(requestParameters.platformId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SuccessFromJSON(jsonValue));
    }

    /**
     * 연동된 SNS 플랫폼을 해제합니다.
     * SNS 플랫폼 연동 해제
     */
    async disconnectPlatform(requestParameters: DisconnectPlatformRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Success> {
        const response = await this.disconnectPlatformRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 사용자가 연동한 모든 SNS 플랫폼 목록을 조회합니다. 팔로워 수는 수동으로 업데이트해야 합니다.
     * 연동된 SNS 플랫폼 목록 조회
     */
    async getUserPlatformsRaw(requestParameters: GetUserPlatformsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseSuccess>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling getUserPlatforms.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['Authorization'] = String(requestParameters.authorization);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/platforms`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseSuccessFromJSON(jsonValue));
    }

    /**
     * 사용자가 연동한 모든 SNS 플랫폼 목록을 조회합니다. 팔로워 수는 수동으로 업데이트해야 합니다.
     * 연동된 SNS 플랫폼 목록 조회
     */
    async getUserPlatforms(requestParameters: GetUserPlatformsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseSuccess> {
        const response = await this.getUserPlatformsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 연동된 SNS 플랫폼의 팔로워 수를 수동으로 업데이트합니다.
     * SNS 플랫폼 팔로워 수 수동 업데이트
     */
    async updateFollowerCountRaw(requestParameters: UpdateFollowerCountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Success>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling updateFollowerCount.');
        }

        if (requestParameters.platformId === null || requestParameters.platformId === undefined) {
            throw new runtime.RequiredError('platformId','Required parameter requestParameters.platformId was null or undefined when calling updateFollowerCount.');
        }

        if (requestParameters.followerCountUpdateRequest === null || requestParameters.followerCountUpdateRequest === undefined) {
            throw new runtime.RequiredError('followerCountUpdateRequest','Required parameter requestParameters.followerCountUpdateRequest was null or undefined when calling updateFollowerCount.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['Authorization'] = String(requestParameters.authorization);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/platforms/{platformId}/follower-count`.replace(`{${"platformId"}}`, encodeURIComponent(String(requestParameters.platformId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: FollowerCountUpdateRequestToJSON(requestParameters.followerCountUpdateRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SuccessFromJSON(jsonValue));
    }

    /**
     * 연동된 SNS 플랫폼의 팔로워 수를 수동으로 업데이트합니다.
     * SNS 플랫폼 팔로워 수 수동 업데이트
     */
    async updateFollowerCount(requestParameters: UpdateFollowerCountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Success> {
        const response = await this.updateFollowerCountRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
